FORMAT: 1A
HOST: http://api.simkl.com

# Simkl
We’ve worked very hard to make Simkl the dream "TV, Anime and Movie Tracker". However, chances are it doesn’t do 100% of what you need it to do. Luckily for you, we added a API so you can extend Simkl’s functionality.

Notes API is a *short texts saving* service similar to its physical paper presence on your table.

## Help us improve!
If you find any error or omission on the documentation, or you’d like us to cover or clarify something, just [let us know] (http://support.simkl.com/) and we’ll try to make you happy.

# Group Authentication - OAuth 2.0
The API uses OAuth2. This details our endpoints.

To obtain a `client_id` and `client_secret`, create an application on the simkl website. Here are some helpful links to get your started.
...

To make calls on behalf of a user you have to obtain an `access_token`. To do this, first use **http://simkl.com/oauth/authorize** method to get `code` and then post it in JSON format to **http://api.simkl.com/oauth/token** url. In response you'll get the `access_token`.
For more details see Authorize and Token sections below.

## Authorize [/oauth/authorize?response_type=code&client_id=client_id&redirect_uri=redirect_uri&state=state]
### Authorize Application [GET]
Redirect a user to this URL. There the user will grant permissions for you app and if everything is fine you'll get a `code` which you can exchange for `access_token`. 
Once you have an access token you can use it to make calls on behalf of a user.

**Note:** You should use the https://simkl.com domain when creating this URL and not the API URL.

+ Parameters
    + response_type (string) ... must be "code"
    + client_id (string) ... Get this from your app settings
    + redirect_uri (string) ... URI in your app settings
    + state (optional, string) ... your custom variable
  
+ Request http://simkl.com/oauth/authorize?response_type=code&client_id=c7be48f1559a6d794w1925237c626326c7bsdfsa559a6d794w1925137c626316&redirect_uri=http://yourdomain.com/oauth.html
        
        
+ Response 200

## Token [/oauth/token]
### Exchange code for access_token [POST]
The redirect to your application in the step above will include a `code` parameter which you can exchange for an `access_token` using this method. 

Save the `access_token` somewhere safe. From that moment your app can authenticate the user by sending the `Authorization` header.

<h4>JSON POST DATA</h4>
Key|Type|Value
---|----|-----
code|string|code you've get from authorize method
client_id|string|Get this in your app settings
client_secret|string|Get this in your app settings
redirect_uri|string|Your URI in your app settings 
grant_type|string|`authorization_code` or `refresh_token`


+ Request (application/json)

        {
            'code'          : 'd7be48f1559a6d794w1925237c626326c7dddfsa559a6d794w1925137c626313',
            'client_id'     : 'c7be48f1559a6d794w1925237c626326c7bsdfsa559a6d794w1925137c626352',
            'client_secret' : 'a9be48f1529a2d794w1925237c626326c7dddfsa559a6d794w1925137c626321'
            'redirect_uri'  : 'http://yourdomain.com/oauth.html',
            'grant_type'    : 'authorization_code'
        }
+ Response 200 (application/json)
Valid code will generate you the `access_token`
    + Body

            { 
                "access_token"  : "b5be48f1529a2d794f1925237c626326c7dddfsa559a6d794w1925137c622329",
                "token_type"    : "bearer", 
                "expires_in"    : 3600,
                "scope"         : "public"
            }
+ Response 401 (application/json)
Invalid code will give you a 401 error
    + Body

            { 
                "error"  : "grant_error"
            }

# Group Sync
If you want to store all of your watched history or download your history list from simkl then *syncing* is what you are looking for.  

## Add to History [/sync/add-to-history]
### Add items to watched/watching history [POST]
<h4>» OAuth Required</h4>
Add items to a user's watched history. Can be passed shows,seasons,episodes and movies. If no episode for the show is passed then it will be marked as completed. If season will be specified then only episodes in those seasons will be marked.

if `watched_at` UTC datetime is passed then all will be marked as watched in the past. 

If `ids` field has more than 1 resources then we will search better.

<h4>JSON POST DATA</h4>
Key|Type|Value
---|----|-----
movies|array|Movie objects (see examples →) 
shows|array|Show objects
episodes|array|Episode objects

<h4>MEDIA OBJECTS POST DATA</h4>
Key|Type|Value
---|----|-----
item|object|movie, show or episode objects 
watched_at|datetime|UTC datetime when the item was watched

+ Request

        {
            'movies' : [
             {
                'watched_at' : '2011-12-03 13:44:00',
                'title'      : 'Terminator 3: Rise of the Machines',
                'year'       : '2003',
                'ids'        : {
                    'imdb' : 'tt0181852',
                    'tmdb' : 296,
                    'simkl': 53536
                }
            },
            {
                'ids':{
                    'simkl': 210728    
                }
            }
            ],
            'shows' : [
                {
                    'title': 'Attack on Titan',
                    'year': 2013,
                    'ids': {
                        'simkl' : 39687,
                        'mal'   : 16498,
                        'tvdb'  : 267440,
                        'imdb'  : 'tt2560140',
                        'anidb' : 9541
                    }
                },
                {
                    
                    'title': 'The Walking Dead',
                    'year': 2010,
                    'ids': {
                        'simkl': 2090,
                        'tvdb': 153021,
                        'imdb': 'tt1520211',
                        
                    },
                    'seasons': [
                        {
                            'watched_at': '2011-09-01 14:44:00',
                            'number': 2
                        },
                        {
                            'number': 1
                            'episodes':[
                                {
                                    'number': 1  
                                },
                                {
                                    'number': 2  
                                }
                            ]
                        }
                        
                    ]
                }
            ]
        }

+ Response 200 (application/json)






